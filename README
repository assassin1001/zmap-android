ZMap is a fast network scanner designed for Internet-wide network surveys. On a
typical desktop computer with a gigabit Ethernet connection, ZMap is capable
scanning the entire public IPv4 address space in under five minutes.

While previous network tools have been designed to scan small network segments,
ZMap is specifically architected to scan the entire address space.  It is built
in a modular manner in order to allow incorporation with other network survey
tools.  ZMap operates on GNU/Linux and supports TCP SYN and ICMP echo request
scanning out of the box.

Documentation and examples can be found at https://zmap.io/.

-- 

ZMap Copyright 2013 Regents of the University of Michigan 

Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See LICENSE for the specific
language governing permissions and limitations under the License.

--

This fork of ZMap has been modified to compile and run on Android
devices. Changes include:
 - getifaddrs implementation from https://github.com/kmackay/android-ifaddrs
 - BSD-style tcp.h definition of tcphdr struct

To use this fork, install the Android NDK, and follow the instructions from
http://www.kandroid.org/ndk/docs/STANDALONE-TOOLCHAIN.html to set up a
toolchain.  Make sure the toolchain is in your path and the CC environment
variable is set correctly.  Compile the dependencies:
 - libpcap, using `./configure --host=arm-linux-androideabi --with-pcap=linux`
 - libgmp, using `./configure --host=arm-linux-androideabi`
 - libjson, after changing the CC in the Makefile to arm-linux-androideabi-gcc
Install these dependencies to your toolchain sysroot using `make install
DESTDIR=$TOOLCHAIN/sysroot/`.  To build zmap you can now use cmake with the PATH
and CC variables set and it will invoke the toolchain.

